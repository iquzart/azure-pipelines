#
# Azure DevOps pipeline
#
# Application:     <Application Name>
# Deployment:      Kubernetes
# Deployment tool: Helm v3.1.0
# Maintained by:   Muhammed Iqbal 
#



trigger:
  batch: true
  branches:
    include:
    - master
    - development
  paths:
    exclude:
    - chart/* 
    - azure-pipelines.yml
    - README.md


# Don't run against PRs
pr: none

variables:
- group: <Valiable Group Name>

- name: tag
  value:  $(Build.SourceBranchName)-$(GitShortSha)

- name: vmImageName
  value: 'ubuntu-latest'

- name: containerRegistryServiceConnection
  value: '<Registry Connection Name>'

- name: imageRepository
  value: '<Repository/Image Name>'

- name: kubernetesEnvironmentDev
  value: '<Development Env Name>'

- name: kubernetesEnvironmentProd
  value: '<Production Env Name>'

- name: imagePullSecretName
  value: '<Image Pull Secret Name>'

- name: kubernetesNamespaceDev
  value: '<Dev Namespace>'

- name: kubernetesNamespaceProd
  value: '<Prod Namespace>'
  


stages:
- stage: Build
  displayName: Build image

  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self
      clean: true
      displayName: Cleaning local repo

    - script: GitShortSha=`git rev-parse --short HEAD` && echo "##vso[task.setvariable variable=GitShortSha]$GitShortSha"
      displayName: Set the Git Short SHA as an environment variablie

    - task: Bash@3
      displayName: Set variables on App Config - Dev
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/development'))
      inputs:
        targetType: 'inline'
        script: |
          echo "export default {
                  base_url: '$(base_url_dev)'
                }" >  $(System.DefaultWorkingDirectory)/src/config.js
          cat $(System.DefaultWorkingDirectory)/src/config.js

    - task: Bash@3
      displayName: Set variables on App Config - PROD
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      inputs:
        targetType: 'inline'
        script: |
          echo "export default {
                  base_url: '$(base_url)'
                }" >  $(System.DefaultWorkingDirectory)/src/config.js
          cat $(System.DefaultWorkingDirectory)/src/config.js
          
    - task: Docker@2
      displayName: Build Container Image
      inputs:
        containerRegistry: '$(containerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: '$(tag)'
        
    - task: Docker@2
      displayName: Push Image to ACR
      inputs:
        containerRegistry: '$(containerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'push'
        tags: '$(tag)'

    - task: Bash@3
      displayName: Set variables to share between stages 
      inputs:
        targetType: 'inline'
        script: |
          mkdir -p $(System.DefaultWorkingDirectory)/chart/variables
          echo $(tag) > $(System.DefaultWorkingDirectory)/chart/variables/tag

    - task: PublishPipelineArtifact@1
      displayName: Publish artifacts
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/chart'
        artifact: 'helm'


- stage: DeployDevelopment
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/development'))
  dependsOn: Build

  jobs:
  - deployment: Development
    displayName: Deploy Development
    pool:
      vmImage: $(vmImageName)
    environment: $(kubernetesEnvironmentDev).$(kubernetesNamespaceDev)  
    strategy:
      runOnce:
        deploy:
          steps:
                 
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: helm
         
          - script: tag=`cat $(Pipeline.Workspace)/helm/variables/tag` && echo "##vso[task.setvariable variable=tag]$tag"
            displayName: Set the Git Short SHA as an environment variable

          - task: HelmInstaller@1
            displayName: Installing Latest Helm
            inputs:
              helmVersionToInstall: 'v3.1.0'

          - task: HelmDeploy@0
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: $(kubernetesEnvironmentDev)
              namespace: '$(kubernetesNamespaceDev)'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(Pipeline.Workspace)/helm'
              releaseName: '<Release Name>'
              overrideValues: 'release=$(Build.BuildNumber),environment=development,ingressAddress=dev-xxx-xxx.xxx.xx,image.repository=$(imageRepository):$(tag),service.port=80'
              resetValues: true


- stage: DeployProduction
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  jobs:
  - deployment: Production
    displayName: Deploy Production
    pool:
      vmImage: $(vmImageName)
    environment: $(kubernetesEnvironmentProd).$(kubernetesNamespaceProd)  
    strategy:
      runOnce:
        deploy:
          steps:
          
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: helm
         
          - script: tag=`cat $(Pipeline.Workspace)/helm/variables/tag` && echo "##vso[task.setvariable variable=tag]$tag"
            displayName: Set the Git Short SHA as an environment variable

          - task: HelmInstaller@1
            displayName: Installing Latest Helm
            inputs:
              helmVersionToInstall: 'v3.1.0'

          - task: HelmDeploy@0
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: $(kubernetesEnvironmentProd)
              namespace: '$(kubernetesNamespaceProd)'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(Pipeline.Workspace)/helm'
              releaseName: '<Release Name>'
              overrideValues: 'release=$(Build.BuildNumber),environment=production,ingressAddress=xxx-xxx.xxx.xx,image.repository=$(imageRepository):$(tag),service.port=80'
              resetValues: true
